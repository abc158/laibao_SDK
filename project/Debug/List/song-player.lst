###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        20/Oct/2017  11:01:11
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\1708\SDK - unlock\src\ui-manager\song-player.c
#    Command line =  
#        "F:\1708\SDK - unlock\src\ui-manager\song-player.c" -lcN "F:\1708\SDK
#        - unlock\project\Debug\List\" --diag_error PE223 -o "F:\1708\SDK -
#        unlock\project\Debug\Obj\" --debug --endian=little --cpu=Cortex-M3 -e
#        --fpu=None --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\INC\c\DLib_Config_Normal.h" --preinclude
#        "F:\1708\SDK - unlock\project\..\lib\syscall_api.h" -I "F:\1708\SDK -
#        unlock\project\..\includes\" -I "F:\1708\SDK -
#        unlock\project\..\src\includes\" -I "F:\1708\SDK -
#        unlock\project\..\lib\" -I "F:\1708\SDK - unlock\project\..\src\" -I
#        "F:\1708\SDK - unlock\project\..\src\local_process\" -I "F:\1708\SDK -
#        unlock\project\..\src\cfg\" -I "F:\1708\SDK -
#        unlock\project\..\src\dock\" -I "F:\1708\SDK -
#        unlock\project\..\src\guardrail\" -I "F:\1708\SDK -
#        unlock\project\..\src\wireless\" -Ohz
#    List file    =  F:\1708\SDK - unlock\project\Debug\List\song-player.lst
#    Object file  =  F:\1708\SDK - unlock\project\Debug\Obj\song-player.o
#
###############################################################################

F:\1708\SDK - unlock\src\ui-manager\song-player.c
      1          //------------------------------------------------------------------------------
      2          //  Copyright (C) 2014-2017, Amicro, Inc.
      3          //  All rights reserved.
      4          //------------------------------------------------------------------------------
      5          #include "syscall_api.h"
      6          #include "am_gpio.h"
      7          #include "ui-song-player.h"
      8          
      9          
     10          
     11          #ifndef SONG_PLAY_TIME_LIMIT
     12          #define SONG_PLAY_TIME_LIMIT 5000
     13          #endif
     14          
     15          #ifdef USE_BEEP_PLAYER
     16          #define BEEP_TURN_ON_TIME_COUNT 50
     17          #define BEEP_SONG_INDEX_MAX  50
     18          
     19          uint32_t beep_on_count = 0;
     20          uint8_t beep_chopping_count[51] = {
     21            1/*00*/, 1/*01*/, 1/*02*/, 5/*03*/, 1/*04*/, 1/*05*/, 1/*06*/, 1/*07*/, 1/*08*/, 1/*09*/,
     22            1/*10*/, 1/*11*/, 1/*12*/, 1/*13*/, 1/*14*/, 1/*15*/, 1/*16*/, 1/*17*/, 10/*18*/, 10/*19*/,
     23            10/*20*/, 1/*21*/, 1/*22*/, 3/*23*/, 1/*24*/, 1/*25*/, 1/*26*/, 1/*27*/, 1/*28*/, 1/*29*/,
     24            1/*30*/, 1/*31*/, 5/*32*/, 5/*33*/, 5/*34*/, 5/*35*/, 5/*36*/, 5/*37*/, 5/*38*/, 5/*39*/,
     25            5/*40*/, 5/*41*/, 5/*42*/, 5/*43*/, 5/*44*/, 5/*45*/, 5/*46*/, 5/*47*/, 5/*48*/, 5/*49*/,
     26            5/*50*/
     27          };
     28          
     29          int songplayer_init(void)
     30          {      
     31            beep_on_count = 0;
     32            gpio_set_value(HAL_IO_AUDIO_PWR_EN, 0);
     33            return 0;    
     34          }
     35          
     36          
     37          int songplayer_play_id(int id, int replace)
     38          {
     39            if (id < BEEP_SONG_INDEX_MAX) {
     40              beep_on_count = (uint32_t)(BEEP_TURN_ON_TIME_COUNT*2*beep_chopping_count[id]);
     41            } else {
     42              beep_on_count = (uint32_t)(BEEP_TURN_ON_TIME_COUNT*2);
     43            }    
     44            gpio_set_value(HAL_IO_AUDIO_PWR_EN, 1);
     45            return 0;
     46          }
     47          
     48          int songplayer_routine(void)
     49          {
     50              if (beep_on_count > 0)
     51              {
     52                  beep_on_count--;
     53                  if (beep_on_count == 0) {
     54                      gpio_set_value(HAL_IO_AUDIO_PWR_EN, 0);
     55                  } else {
     56                      if ( beep_on_count % BEEP_TURN_ON_TIME_COUNT == 0) {
     57                          if (beep_on_count/BEEP_TURN_ON_TIME_COUNT%2 == 0) {
     58                              gpio_set_value(HAL_IO_AUDIO_PWR_EN, 1);
     59                          } else {
     60                              gpio_set_value(HAL_IO_AUDIO_PWR_EN, 0);
     61                          }
     62                      }
     63                  }
     64              } else {
     65                  gpio_set_value(HAL_IO_AUDIO_PWR_EN, 0);
     66              }
     67              return 0;
     68          }
     69          
     70          int songplayer_quit_playing(void)
     71          {
     72              beep_on_count = 0;
     73              gpio_set_value(HAL_IO_AUDIO_PWR_EN, 0);
     74              return 0;
     75          }
     76          
     77          int songplayer_is_playing(void)
     78          {
     79            return (beep_on_count > 0) ? 1 : 0;
     80          }
     81          
     82          #else
     83          
     84          u8 songplayer_en = 1;
     85          
     86          int songplayer_init(void)
     87          {          
     88            return voiceplayer_init();    
     89          }
     90          
     91          int songplayer_quit_playing(void)
     92          {
     93            return voiceplayer_quit_playing();
     94          }
     95          
     96          int songplayer_is_playing(void)
     97          {
     98            return voiceplayer_is_playing();
     99          }
    100          
    101          int songplayer_play_id(int id, int replace)
    102          {
    103            int ret =1;
    104            if (songplayer_en)
    105            {
    106          	printf("id:%d\r\n",id);
    107              ret = voiceplayer_play_index(id, replace);
    108          	printf("ret:%d\r\n",ret);
    109            }
    110            return 0;
    111          }
    112          
    113          int songplayer_routine(void)
    114          {
    115              return 0;
    116          }
    117          
    118          void set_songplayer_onoff(u8 onoff)
    119          {
    120            songplayer_en = onoff;
    121          }
    122          
    123          
    124          u8 get_songplayer_onoff(void)
    125          {
    126          	return songplayer_en;
    127          }
    128          
    129          #endif
    130          
    131          
    132          int songplayer_wait_for_song_completion(void)
    133          {
    134            uint32_t start_time = timer_ms();
    135            uint32_t time_diff;
    136            uint32_t cur_time;
    137            
    138            while(songplayer_is_playing())
    139            {
    140              cur_time = timer_ms();
    141              time_diff = cur_time - start_time;
    142              if(time_diff > SONG_PLAY_TIME_LIMIT) {
    143                break;
    144              }
    145            }
    146            return 0;
    147          }
    148          
    149          
    150          
    151          
    152          
    153          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   get_songplayer_onoff
       0   set_songplayer_onoff
       0   songplayer_init
         0   -> voiceplayer_init
       0   songplayer_is_playing
         0   -> voiceplayer_is_playing
      16   songplayer_play_id
        16   -- Indirect call
        16   -> voiceplayer_play_index
       0   songplayer_quit_playing
         0   -> voiceplayer_quit_playing
       0   songplayer_routine
       8   songplayer_wait_for_song_completion
         8   -> timer_ms
         8   -> voiceplayer_is_playing


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       8  ?_0
      12  ?_1
       6  get_songplayer_onoff
       6  set_songplayer_onoff
       1  songplayer_en
       4  songplayer_init
       4  songplayer_is_playing
      50  songplayer_play_id
       4  songplayer_quit_playing
       4  songplayer_routine
      32  songplayer_wait_for_song_completion

 
   1 byte  in section .data
 138 bytes in section .text
 
 138 bytes of CODE memory
   1 byte  of DATA memory

Errors: none
Warnings: none
