###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        20/Oct/2017  11:01:13
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\1708\SDK - unlock\src\wall_follow\wall_follow_common.c
#    Command line =  
#        "F:\1708\SDK - unlock\src\wall_follow\wall_follow_common.c" -lcN
#        "F:\1708\SDK - unlock\project\Debug\List\" --diag_error PE223 -o
#        "F:\1708\SDK - unlock\project\Debug\Obj\" --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" --preinclude "F:\1708\SDK -
#        unlock\project\..\lib\syscall_api.h" -I "F:\1708\SDK -
#        unlock\project\..\includes\" -I "F:\1708\SDK -
#        unlock\project\..\src\includes\" -I "F:\1708\SDK -
#        unlock\project\..\lib\" -I "F:\1708\SDK - unlock\project\..\src\" -I
#        "F:\1708\SDK - unlock\project\..\src\local_process\" -I "F:\1708\SDK -
#        unlock\project\..\src\cfg\" -I "F:\1708\SDK -
#        unlock\project\..\src\dock\" -I "F:\1708\SDK -
#        unlock\project\..\src\guardrail\" -I "F:\1708\SDK -
#        unlock\project\..\src\wireless\" -Ohz
#    List file    =  
#        F:\1708\SDK - unlock\project\Debug\List\wall_follow_common.lst
#    Object file  =  
#        F:\1708\SDK - unlock\project\Debug\Obj\wall_follow_common.o
#
###############################################################################

F:\1708\SDK - unlock\src\wall_follow\wall_follow_common.c
      1          #include "wall_follow_common.h"
      2          #include "syscall_api.h"
      3          #include "sensor/sensor.h"
      4          #include <math.h>
      5          
      6          
      7          #define USE_WF_MID_CONTROL
      8          #define MID_THROD 100  //center throd to make robot turn away
      9          #define MID_PLUS  20
     10          #define WF_SPEED_VALUE 240           //the speed following wall
     11          #define WF_SPEED_SIGNAl_SMALL 150    //the speed turn to wall to find the signal
     12          
     13          #define IR_MIN_VALUE  25   //A3: 35
     14          #define IR_MAX_VALUE  250
     15          
     16          #define PID_INT_MAX_VAL 500
     17          #define WF_PID_p 0.002
     18          #define WF_PID_i 0.00005
     19          #define WF_PID_d 0.00002
     20          
     21          #define TURN_COUNT_MAX 200  //150    //when no signal, inner speed is 1/5, after this time, speed set to zero, if 255, no such function
     22          
     23          #define PHYSIC_BUMP_ADAPTER_TARGET_VALUE     1/3  //when detect physic bump, max ir value plus this value
     24          #define NO_PHYSIC_BUMP_ADAPTER_TARGET_VALUE  5/6  //when detect no physic bump, max ir value plus this value
     25          
     26          #define USE_WF_NOT_CYCLE_PROCESS
     27          
     28          //#define OPEN_DEBUG_PRINT
     29          //#define OPEN_CYCLE_WF_PRINT
     30          
     31          #ifdef OPEN_DEBUG_PRINT
     32            #define AM_WF_DEBUG_PRINT(...)    printf(__VA_ARGS__);
     33          #else
     34            #define AM_WF_DEBUG_PRINT(...)
     35          #endif
     36          
     37          #ifdef OPEN_CYCLE_WF_PRINT
     38            #define AM_WF_CYCLE_DEBUG_PRINT(...)    printf(__VA_ARGS__);
     39          #else
     40            #define AM_WF_CYCLE_DEBUG_PRINT(...)
     41          #endif
     42          
     43          
     44          WfParames_t* WfParames_p;
     45          
     46          #define UTIL_CLIFF_MASK 0x1
     47          #define UTIL_DOCK_MASK  0x2
     48          // returns angle1-angle2, between -M_PI_F and M_PI_F
     49          float gyro_radian_diff_f(float angle1, float angle2)
     50          {
     51             // printf("gyro_radian_diff_f!!\r\n");
     52              float a = angle1 - angle2 + M_PI_F;
     53              if(a > 2*M_PI_F)
     54              {
     55                  a = a - 2*M_PI_F*floorf(a/(2*M_PI_F));
     56              }
     57              else if(a<0)
     58              {
     59                  a = a + 2*M_PI_F*(1+floorf(-a/(2*M_PI_F)));
     60              }
     61          
     62              return a - M_PI_F;
     63          }
     64          
     65          
     66          typedef struct _wf_global_par_t
     67          {
     68            float turn_target_angle;
     69            s16 ir_target_value;
     70            s16 ir_adapter_max;
     71            s32 pid_integrate;
     72            s32 pid_deritive;
     73            s16 ex_ir_error;
     74            u8 following_count; //increase counting when robot already following the wall
     75            u8 util;  //bit 0: cliff sig, bit 1: dock avoid sig
     76            u8 turn_count;
     77          }wf_g_par_t;
     78          
     79          #define FOLLOWING_COUNT_MAX 200
     80          #define FOLLOWING_COUNT_MIN 0
     81          
     82          typedef struct _sensor_data_t_
     83          {
     84            s16 ir_left_value;
     85            s16 ir_right_value;
     86          #ifdef USE_WF_MID_CONTROL
     87            s16 ir_mid_left_value;
     88            s16 ir_mid_right_value;
     89          #endif
     90          }ir_sensor_data_t;
     91          
     92          //avoid wall-follow turn cycle
     93          #ifdef USE_WF_NOT_CYCLE_PROCESS
     94          #define CYCLE_ARRAY_INDEX_MAX 16
     95          #define CYCLE_COUNT_MAX 2
     96          #define ANGLE_INTERVEL M_PI_F/4
     97          #define ANGLE_INTERVEL_TIME 2000
     98          #define WF_CYCLE_TIME_OUT_VAL 20000
     99          #define CYCLE_GO_MAX_DISTANCE 4.0f
    100          #define CYCLE_GO_MAX_TIMEOUT  20000
    101          typedef struct _wf_turn_array_t_
    102          {
    103            float x;
    104            float y;
    105            float angle;
    106            u32 stp;
    107          }wf_turn_array_t;
    108          
    109          wf_turn_array_t* wf_turn_array_p=NULL;
    110          
    111          u8 wf_turn_index_i;
    112          u8 wf_turn_good_count;
    113          BOOLEAN in_cycle_go_forward_sig;
    114          #endif
    115          
    116          wf_g_par_t wf_g_par;
    117          
    118          
    119          #ifdef USE_WF_NOT_CYCLE_PROCESS
    120          int cycle_check_function()
    121          {
    122            //check cycle or not
    123            wf_turn_array_t* wf_turn_at_p;
    124            wf_turn_array_t* wf_search_turn_p;
    125            u8 wf_search_trun_index;
    126            float now_angle,now_x,now_y;
    127            u32 now_stp;
    128            u8 i;
    129            float dist_temp;
    130          
    131              wf_turn_at_p = wf_turn_array_p + wf_turn_index_i;
    132              now_angle=wf_turn_at_p->angle;
    133              now_stp=wf_turn_at_p->stp;
    134              now_x=wf_turn_at_p->x;
    135              now_y=wf_turn_at_p->y;
    136              //search back
    137              wf_search_trun_index = (wf_turn_index_i==0)?(CYCLE_ARRAY_INDEX_MAX-1):(wf_turn_index_i-1);
    138              for(i=0;i<CYCLE_ARRAY_INDEX_MAX-2;i++)
    139              {
    140                wf_search_turn_p = wf_turn_array_p + wf_search_trun_index;
    141                dist_temp = (now_x-wf_search_turn_p->x)*(now_x-wf_search_turn_p->x)+(now_y-wf_search_turn_p->y)*(now_y-wf_search_turn_p->y);
    142                if(((now_stp-wf_search_turn_p->stp)>WF_CYCLE_TIME_OUT_VAL) && (dist_temp<0.5*0.5))
    143                {
    144                  return 0;  //timeout return
    145                }
    146                if(fabsf(gyro_radian_diff_f(now_angle,wf_search_turn_p->angle))<M_PI_F/4)
    147                {
    148                    if(fabsf(now_angle-wf_search_turn_p->angle)>(2*M_PI_F*7/8))
    149                    {
    150                      //check if it's the inner cycle or outer cycle, inner cycle mean cycle one small obstacle. we only check iner cycle.
    151                      if((WfParames_p->contact_side==AM_LEFT && (now_angle>wf_search_turn_p->angle)) || (WfParames_p->contact_side==AM_RIGHT && (now_angle<wf_search_turn_p->angle)))
    152                      {
    153                        //good value
    154                        AM_WF_CYCLE_DEBUG_PRINT("wf cy %d,%d\r\n", wf_search_trun_index,wf_turn_good_count);
    155                        wf_turn_good_count++;
    156                        if(wf_turn_good_count>CYCLE_COUNT_MAX)
    157                        {
    158                          return 1;
    159                        }
    160                        return 0;
    161                      }
    162                      else
    163                      {
    164                        AM_WF_CYCLE_DEBUG_PRINT("not inner %d,%d\r\n", wf_search_trun_index,wf_turn_good_count);
    165                      }
    166                    }
    167                }
    168                wf_search_trun_index = (wf_search_trun_index==0)?(CYCLE_ARRAY_INDEX_MAX-1):(wf_search_trun_index-1);
    169              }
    170              if(wf_turn_good_count>0)
    171              {
    172                wf_turn_good_count--;
    173              }
    174          
    175            return 0;
    176          }
    177          #endif
    178          
    179          void reload_sensor_data(ir_sensor_data_t* sensor_data)
    180          {
    181            sensor_data->ir_left_value=robot_signal_distance(LT_LEFT)>>1;
    182            sensor_data->ir_right_value=robot_signal_distance(LT_RIGHT)>>1;
    183          #ifdef USE_WF_MID_CONTROL
    184            sensor_data->ir_mid_left_value=robot_signal_distance(LT_CENTERLEFT)>>1;
    185            sensor_data->ir_mid_right_value=robot_signal_distance(LT_CENTERRIGHT)>>1;
    186          #endif
    187          }
    188          
    189          //turn the robot away from wall
    190          void turn_away_wall(s16* left_speed, s16* right_speed)
    191          {
    192            float angle_error = gyro_radian_diff_f(wf_g_par.turn_target_angle, get_gyro_radian());
    193            float angle_abs_error=fabsf(angle_error);
    194            float speed_val;
    195          
    196            if(angle_abs_error<M_PI_F/13)
    197            {
    198          	//reach the angle, stop and change status
    199              *left_speed=0;
    200              *right_speed=0;
    201              WfParames_p->wf_run_state=WF_STAT_FOLLOW; //change the state
    202              //AM_WF_DEBUG_PRINT("wf s c\r\n");
    203            }
    204            else
    205            {
    206          	//turn away from wall
    207              if(angle_error>0)
    208              {
    209                speed_val = MIN(angle_error, 1) * WF_SPEED_VALUE;
    210              }
    211              else
    212              {
    213                speed_val = MAX(angle_error, -1) * WF_SPEED_VALUE;
    214              }
    215              *left_speed=(s16)speed_val*-1;
    216              *right_speed=(s16)speed_val;
    217            }
    218          }
    219          
    220          
    221          void calculate_wheel_speed(s16 ir_error, s16* close_wheel, s16* far_wheel)
    222          {
    223            float cof;
    224          
    225            //this variable control the start speed
    226            wf_g_par.following_count = (wf_g_par.following_count<FOLLOWING_COUNT_MAX)?(wf_g_par.following_count+1):FOLLOWING_COUNT_MAX;
    227          
    228            //calculate the PID i
    229            wf_g_par.pid_integrate += ir_error;
    230            if(wf_g_par.pid_integrate>PID_INT_MAX_VAL)
    231            {
    232              wf_g_par.pid_integrate=PID_INT_MAX_VAL;
    233            }
    234            else if(wf_g_par.pid_integrate < (-1*PID_INT_MAX_VAL))
    235            {
    236              wf_g_par.pid_integrate=-1*PID_INT_MAX_VAL;
    237            }
    238          
    239            //calculate the PID d
    240            wf_g_par.pid_deritive = (ir_error-wf_g_par.ex_ir_error);
    241          
    242            //calculate PID
    243            cof = (float)ir_error*WF_PID_p + (float)wf_g_par.pid_integrate*WF_PID_i-(float)wf_g_par.pid_deritive*WF_PID_d;
    244            cof = MAX(MIN(fabsf(cof), 0.6f), 0.03f);
    245          
    246            //calculate speed
    247            if(ir_error>0)  //close to wall
    248            {
    249              *close_wheel=(s16)(WF_SPEED_VALUE);
    250              *far_wheel=(s16)((float)WF_SPEED_VALUE*(1-cof));
    251            }
    252            else if(ir_error<0) //far away from wall
    253            {
    254              *far_wheel=(s16)(WF_SPEED_VALUE);
    255              *close_wheel=(s16)((float)WF_SPEED_VALUE*(1-cof));
    256            }
    257            else
    258            {
    259              *far_wheel=WF_SPEED_VALUE;
    260              *close_wheel=WF_SPEED_VALUE;
    261            }
    262          
    263            //do the start speed control
    264            if(wf_g_par.following_count<FOLLOWING_COUNT_MAX-1)
    265            {
    266          	    *far_wheel=*far_wheel>>1;
    267          	    *close_wheel=*close_wheel>>1;
    268            }
    269            else
    270            {
    271              //AM_WF_DEBUG_PRINT("wf_f\r\n");
    272            }
    273          }
    274          
    275          void follow_wall_run(s16* left_speed, s16* right_speed, ir_sensor_data_t* sensor_data)
    276          {
    277            s16 ir_error=0;
    278          
    279            if(WfParames_p->contact_side == AM_LEFT)
    280            {
    281              if(sensor_data->ir_left_value < IR_MIN_VALUE)
    282              {
    283                //when the ir sensor value is small, just turn to wall
    284                *right_speed=WF_SPEED_SIGNAl_SMALL;
    285                if(wf_g_par.util & UTIL_CLIFF_MASK)
    286                {   //when cliff and dock avoid, the robot turn slowly
    287                  *left_speed=WF_SPEED_SIGNAl_SMALL/2;
    288                }
    289                else if(wf_g_par.util &  UTIL_DOCK_MASK)
    290                {
    291              	  *left_speed=WF_SPEED_SIGNAl_SMALL*8/11;
    292                }
    293                else
    294                {
    295              	  if(wf_g_par.turn_count<TURN_COUNT_MAX)
    296              	  {
    297                        *left_speed=WF_SPEED_SIGNAl_SMALL/5;
    298              	  }
    299              	  else   //delay a time, make robot one wheel stop, more closer to obstacle
    300              	  {
    301              		  *right_speed=WF_SPEED_SIGNAl_SMALL*3/4;
    302              		  *left_speed=WF_SPEED_SIGNAl_SMALL/8;
    303              	  }
    304                }
    305                AM_WF_DEBUG_PRINT("wf Lf %d\r\n", sensor_data->ir_left_value);
    306                wf_g_par.pid_integrate=0;
    307                wf_g_par.pid_deritive=0;
    308                wf_g_par.ex_ir_error=0;
    309                wf_g_par.following_count=FOLLOWING_COUNT_MIN;
    310                wf_g_par.turn_count = (wf_g_par.turn_count<TURN_COUNT_MAX)?(wf_g_par.turn_count+1):TURN_COUNT_MAX;
    311              }
    312              else
    313              {
    314                //when the signal is larger than threshold, do the pid control
    315                ir_error = sensor_data->ir_left_value - wf_g_par.ir_target_value;
    316          #ifdef USE_WF_MID_CONTROL
    317                if(sensor_data->ir_mid_left_value>(MID_THROD+wf_g_par.ir_target_value)/2)
    318                {
    319              	  ir_error += sensor_data->ir_mid_left_value*MID_PLUS;
    320                }
    321          #endif
    322                calculate_wheel_speed(ir_error, left_speed, right_speed);
    323                AM_WF_DEBUG_PRINT("wf Ls(%d,%d),%d,%d,(%d,%d)\r\n", *left_speed, *right_speed, ir_error,wf_g_par.following_count,sensor_data->ir_left_value, wf_g_par.ir_target_value);
    324                WfParames_p->wf_following_sig=TRUE;
    325                wf_g_par.util = 0;
    326                wf_g_par.turn_count=0;
    327              }
    328            }
    329            else  //AM_RIGHT
    330            {
    331              if(sensor_data->ir_right_value < IR_MIN_VALUE)
    332              {
    333                //when the ir sensor value is small, just turn to wall
    334                *left_speed=WF_SPEED_SIGNAl_SMALL;
    335                if(wf_g_par.util & UTIL_CLIFF_MASK)
    336                {
    337                    *right_speed=WF_SPEED_SIGNAl_SMALL/2;
    338                }
    339                else if(wf_g_par.util &  UTIL_DOCK_MASK)
    340                {
    341              	  *right_speed=WF_SPEED_SIGNAl_SMALL*8/11;
    342                }
    343                else
    344                {
    345            	    if(wf_g_par.turn_count<TURN_COUNT_MAX)
    346            	    {
    347                      *right_speed=WF_SPEED_SIGNAl_SMALL/5;
    348            	    }
    349            	    else   //delay a time, make robot one wheel stop, more closer to obstacle
    350            	    {
    351            	    	*left_speed=WF_SPEED_SIGNAl_SMALL*3/4;
    352            	  	    *right_speed=WF_SPEED_SIGNAl_SMALL/8;
    353            	    }
    354                }
    355                AM_WF_DEBUG_PRINT("wf Rf %d\r\n", sensor_data->ir_left_value);
    356                wf_g_par.pid_integrate=0;
    357                wf_g_par.pid_deritive=0;
    358                wf_g_par.ex_ir_error=0;
    359                wf_g_par.following_count=FOLLOWING_COUNT_MIN;
    360                wf_g_par.turn_count = (wf_g_par.turn_count<TURN_COUNT_MAX)?(wf_g_par.turn_count+1):TURN_COUNT_MAX;
    361              }
    362              else
    363              {
    364                //when the signal is larger than threshold, do the pid control
    365                ir_error = sensor_data->ir_right_value - wf_g_par.ir_target_value;
    366          #ifdef USE_WF_MID_CONTROL
    367                if(sensor_data->ir_mid_right_value>(MID_THROD+wf_g_par.ir_target_value)/2)
    368                {
    369              	  ir_error += sensor_data->ir_mid_right_value*MID_PLUS;
    370                }
    371          #endif
    372                calculate_wheel_speed(ir_error, right_speed, left_speed);
    373                AM_WF_DEBUG_PRINT("wf Rs(%d,%d),%d,%d,(%d,%d)\r\n", *left_speed, *right_speed, ir_error,wf_g_par.following_count,sensor_data->ir_right_value, wf_g_par.ir_target_value);
    374                WfParames_p->wf_following_sig=TRUE;
    375                wf_g_par.util = 0;
    376                wf_g_par.turn_count=0;
    377              }
    378            }
    379          
    380            wf_g_par.ex_ir_error=ir_error;
    381          }
    382          
    383          int wall_follow_start(AM_LeftRight contact_side, WfParames_t* wfp_p)
    384          {
    385            WfParames_p=wfp_p;
    386            if(WfParames_p->wf_run_state != WF_STAT_STOP && WfParames_p->contact_side==contact_side)
    387            {
    388                  AM_WF_DEBUG_PRINT("wf already run:%d\r\n", WfParames_p->contact_side);
    389                  return 1;
    390            }
    391            //WfParames_p->wf_run_state = WF_STAT_FOLLOW;
    392            //wf_g_par.turn_target_angle = get_gyro_radian();
    393            
    394            WfParames_p->wf_run_state=WF_STAT_TURN;
    395            WfParames_p->contact_side=contact_side;
    396            if(WfParames_p->contact_side==AM_LEFT)
    397            {
    398              wf_g_par.turn_target_angle = get_gyro_radian() - M_PI_F/4.3f;
    399            }
    400            else  //AM_RIGHT
    401            {
    402              wf_g_par.turn_target_angle = get_gyro_radian() + M_PI_F/4.3f;
    403            }
    404            
    405            wf_g_par.ir_target_value = IR_MIN_VALUE*2;  //set a init value, this variable should be changed during running
    406            wf_g_par.ir_adapter_max = 0;
    407            
    408            wfp_p->wf_following_sig=FALSE;
    409            AM_WF_DEBUG_PRINT("app wf s\r\n");
    410            //when state is not stop, and contact_side is different, what should do?
    411          #ifdef USE_WF_NOT_CYCLE_PROCESS
    412            if(wf_turn_array_p==NULL)
    413            {
    414              wf_turn_array_p = malloc(CYCLE_ARRAY_INDEX_MAX * sizeof(wf_turn_array_t));
    415              if(wf_turn_array_p != NULL)
    416              {
    417                memset(wf_turn_array_p, 0, CYCLE_ARRAY_INDEX_MAX * sizeof(wf_turn_array_t));
    418              }
    419              wf_turn_index_i=0;
    420              wf_turn_good_count=0;
    421              in_cycle_go_forward_sig=FALSE;
    422            }
    423          #endif
    424            return 0;
    425          }
    426          
    427          void wall_follow_stop(WfParames_t* wfp_p)
    428          {
    429            WfParames_p=wfp_p;
    430            if(WfParames_p->wf_run_state != WF_STAT_STOP)
    431            {
    432              WfParames_p->wf_run_state=WF_STAT_STOP;
    433            }
    434            AM_WF_DEBUG_PRINT("app wf e\r\n");
    435          #ifdef USE_WF_NOT_CYCLE_PROCESS
    436            if(wf_turn_array_p!=NULL)
    437            {
    438              free(wf_turn_array_p);
    439              wf_turn_array_p=NULL;
    440            }
    441          #endif
    442          }
    443          
    444          //wf_stae_value:
    445          //             WF_STAT_STOP=0
    446          //             WF_STAT_TURN=1
    447          //             WF_STAT_FOLLOW=2
    448          //When sytem process (bump, cliff, stuck), this callback will be block
    449          //This function will be called by system every 10mS.
    450          //Make sure there is no dead loop in the function.
    451          //return: 1: bump return,  2: cliff return,
    452          //      
    453          int wall_follow_callback(WfParames_t* wfp_p)
    454          {
    455            ir_sensor_data_t sensor_data;
    456            s16 ir_now_data;
    457          
    458            //update sensor data
    459            reload_sensor_data(&sensor_data);
    460          
    461            WfParames_p=wfp_p;
    462          
    463            //get the adaptive threshold
    464            if(WfParames_p->contact_side==AM_LEFT)
    465            {
    466          	  ir_now_data = sensor_data.ir_left_value;
    467            }
    468            else
    469            {
    470          	  ir_now_data = sensor_data.ir_right_value;
    471            }
    472            if(wf_g_par.ir_adapter_max<ir_now_data)
    473            {
    474          	  wf_g_par.ir_adapter_max = ir_now_data;
    475            }
    476            //physic bump need use small touch
    477            if(wfp_p->physic_bump==TRUE)
    478            {
    479               wf_g_par.ir_target_value = wf_g_par.ir_adapter_max*PHYSIC_BUMP_ADAPTER_TARGET_VALUE;
    480            }
    481            else
    482            {
    483              wf_g_par.ir_target_value = wf_g_par.ir_adapter_max*NO_PHYSIC_BUMP_ADAPTER_TARGET_VALUE;
    484            }
    485          
    486            if(wf_g_par.ir_target_value<IR_MIN_VALUE*1.5)
    487            {
    488              wf_g_par.ir_target_value=(s16)(IR_MIN_VALUE*1.5);
    489            }
    490            if(wf_g_par.ir_target_value>IR_MAX_VALUE)
    491            {
    492          	  wf_g_par.ir_target_value=IR_MAX_VALUE;
    493            }
    494          
    495            //process the bump
    496            if((WfParames_p->robot_bump != 0) && (WfParames_p->cliff_bump == 0))  //cliff has high priority
    497            {
    498              WfParames_p->wf_run_state=WF_STAT_TURN;
    499              if(WfParames_p->contact_side==AM_LEFT)
    500              {
    501                  //Note:it's better change the turn angle by the bump location or touch location
    502                  wf_g_par.turn_target_angle = get_gyro_radian() - M_PI_F/4.3f;
    503              }
    504              else  //AM_RIGHT
    505              {
    506              	//Note:it's better change the turn angle by the bump location or touch location
    507                  wf_g_par.turn_target_angle = get_gyro_radian() + M_PI_F/4.3f;
    508              }
    509              AM_WF_DEBUG_PRINT("app wf b(%d,%d)\r\n", (int)(get_gyro_radian()*100), (int)(wf_g_par.turn_target_angle*100));
    510              //check if robot is in dock region
    511              //if(in_dock_region())
    512              //wf_g_par.util |= UTIL_DOCK_MASK;
    513          
    514              wf_g_par.ir_adapter_max = wf_g_par.ir_adapter_max >> 2;
    515              wf_g_par.ir_target_value = wf_g_par.ir_target_value >> 2;
    516              AM_WF_DEBUG_PRINT("app new throd(%d,%d)\r\n", wf_g_par.ir_adapter_max, wf_g_par.ir_target_value);
    517              wfp_p->wf_following_sig=FALSE;
    518              in_cycle_go_forward_sig=FALSE;
    519              return 1;  //return 1, let system process the bump
    520          
    521            }
    522          
    523            //process the cliff
    524            if(WfParames_p->cliff_bump != 0)
    525            {
    526              WfParames_p->wf_run_state=WF_STAT_TURN;
    527              if(WfParames_p->contact_side==AM_LEFT)
    528              {
    529                wf_g_par.turn_target_angle = get_gyro_radian() - M_PI_F/4.3f;
    530              }
    531              else  //AM_RIGHT
    532              {
    533                wf_g_par.turn_target_angle = get_gyro_radian() + M_PI_F/4.3f;
    534              }
    535              AM_WF_DEBUG_PRINT("app wf c(%d,%d)\r\n", (int)(get_gyro_radian()*100), (int)(wf_g_par.turn_target_angle*100));
    536              wf_g_par.util |= UTIL_CLIFF_MASK;
    537          
    538              wf_g_par.ir_target_value = wf_g_par.ir_target_value >> 2;
    539              wf_g_par.ir_adapter_max = wf_g_par.ir_adapter_max>>2;
    540              AM_WF_DEBUG_PRINT("app newc throd(%d,%d)\r\n", wf_g_par.ir_adapter_max, wf_g_par.ir_target_value);
    541              wfp_p->wf_following_sig=FALSE;
    542              in_cycle_go_forward_sig=FALSE;
    543              return 2;  //return 2, let system process the cliff
    544            }
    545          
    546            //process dock signal
    547            if(WfParames_p->dock_sig != 0)
    548            {
    549                WfParames_p->wf_run_state=WF_STAT_TURN;
    550                if(WfParames_p->contact_side==AM_LEFT)
    551                {
    552                  wf_g_par.turn_target_angle = get_gyro_radian() - M_PI_F/2.1f;
    553                }
    554                else  //AM_RIGHT
    555                {
    556                  wf_g_par.turn_target_angle = get_gyro_radian() + M_PI_F/2.1f;
    557                }
    558                AM_WF_DEBUG_PRINT("wf d(%d,%d)\r\n", (int)(get_gyro_radian()*100), (int)(wf_g_par.turn_target_angle*100));
    559                wf_g_par.util |= UTIL_DOCK_MASK;
    560          
    561                wf_g_par.ir_target_value = wf_g_par.ir_target_value >> 2;
    562                wf_g_par.ir_adapter_max = wf_g_par.ir_adapter_max>>2;
    563                AM_WF_DEBUG_PRINT("newc throd(%d,%d)\r\n", wf_g_par.ir_adapter_max, wf_g_par.ir_target_value);
    564                wfp_p->wf_following_sig=FALSE;
    565                in_cycle_go_forward_sig=FALSE;
    566                return 3;
    567            }
    568          
    569            switch(WfParames_p->wf_run_state)
    570            {
    571            case WF_STAT_TURN:
    572              turn_away_wall(&WfParames_p->left_speed_mmps, &WfParames_p->right_speed_mmps);
    573              wf_g_par.turn_count=0;
    574              break;
    575            case WF_STAT_FOLLOW:
    576              follow_wall_run(&WfParames_p->left_speed_mmps, &WfParames_p->right_speed_mmps, &sensor_data);
    577              break;
    578            default:
    579              break;
    580            }
    581          
    582            //make sure the wall follow don't go in cycle
    583            //this process is at last, so it has highest priority
    584          #ifdef USE_WF_NOT_CYCLE_PROCESS
    585            if(wf_turn_array_p!=NULL)
    586            {
    587              AM_Pose robot_pose;
    588              wf_turn_array_t* wf_turn_at_p;
    589              u8 index_ex;
    590              float angle_diff;
    591          
    592              //store the angle record
    593              robot_pos_get(&robot_pose);
    594              //check if the data need to be stored or not
    595              index_ex=(wf_turn_index_i==0)?(CYCLE_ARRAY_INDEX_MAX-1):(wf_turn_index_i-1);
    596              wf_turn_at_p = wf_turn_array_p + index_ex;
    597              angle_diff=fabsf(gyro_radian_diff_f(wf_turn_at_p->angle, robot_pose.angle));
    598          
    599              if(angle_diff>ANGLE_INTERVEL || timer_elapsed(wf_turn_at_p->stp)>ANGLE_INTERVEL_TIME)
    600              { //record the data in circle array
    601                wf_turn_at_p = wf_turn_array_p + wf_turn_index_i;
    602                wf_turn_at_p->x=robot_pose.xy.x;
    603                wf_turn_at_p->y=robot_pose.xy.y;
    604                wf_turn_at_p->angle=robot_pose.angle;
    605                wf_turn_at_p->stp=timer_ms();
    606                AM_WF_CYCLE_DEBUG_PRINT("wf rec (%d,%d),%d\r\n", (int)( wf_turn_at_p->angle*1000), wf_turn_at_p->stp,wf_turn_index_i);
    607                //turn cycle process function
    608                if(cycle_check_function()>0)
    609                {
    610                  //process go forward
    611                  memset(wf_turn_array_p, 0, CYCLE_ARRAY_INDEX_MAX * sizeof(wf_turn_array_t));
    612                  wf_turn_index_i=0;
    613                  wf_turn_good_count=0;
    614                  //the first data the record the position and time
    615                  wf_turn_at_p = wf_turn_array_p + wf_turn_index_i;
    616                  wf_turn_at_p->x=robot_pose.xy.x;
    617                  wf_turn_at_p->y=robot_pose.xy.y;
    618                  wf_turn_at_p->angle=robot_pose.angle;
    619                  wf_turn_at_p->stp=timer_ms();
    620                  in_cycle_go_forward_sig=TRUE;
    621                  AM_WF_CYCLE_DEBUG_PRINT("wf in cyc\r\n");
    622                }
    623                wf_turn_index_i = (wf_turn_index_i<CYCLE_ARRAY_INDEX_MAX-1)?(wf_turn_index_i+1):0;
    624              }
    625          
    626                //do go forward
    627                if(in_cycle_go_forward_sig==TRUE)
    628                {
    629                  AM_xy start_xy;
    630                  float go_distance;
    631                  start_xy.x=wf_turn_array_p->x;
    632                  start_xy.y=wf_turn_array_p->y;
    633                  go_distance=robot_xy_dist(&robot_pose.xy, &start_xy);
    634                  if((go_distance>CYCLE_GO_MAX_DISTANCE) || (timer_elapsed(wf_turn_array_p->stp)>CYCLE_GO_MAX_TIMEOUT))
    635                  { //add max distance and timeout check
    636                    wfp_p->left_speed_mmps=0;
    637                    wfp_p->right_speed_mmps=0;
    638                    in_cycle_go_forward_sig=FALSE;
    639                    AM_WF_CYCLE_DEBUG_PRINT("wf cycle stop\r\n");
    640                    return 0;
    641                  }
    642                  wfp_p->left_speed_mmps=WF_SPEED_VALUE;
    643                  wfp_p->right_speed_mmps=WF_SPEED_VALUE;
    644                  //AM_WF_CYCLE_DEBUG_PRINT("wf cycle line\r\n");
    645                }
    646            }
    647          
    648          #endif
    649          
    650            return 0;
    651          }
    652          
    653          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   calculate_wheel_speed
        32   -> __aeabi_d2f
        32   -> __aeabi_dadd
        32   -> __aeabi_dmul
        32   -> __aeabi_dsub
        32   -> __aeabi_f2d
        32   -> __aeabi_f2iz
        32   -> __aeabi_fmul
        32   -> __aeabi_fsub
        32   -> __aeabi_i2f
        32 __aeabi_cfcmple
        32 __aeabi_cfrcmple
      48   cycle_check_function
        48   -> __aeabi_fadd
        48   -> __aeabi_fmul
        48   -> __aeabi_fsub
        48   -> gyro_radian_diff_f
        48 __aeabi_cfcmple
        48 __aeabi_cfrcmple
      24   follow_wall_run
        24   -> calculate_wheel_speed
      16   gyro_radian_diff_f
         0   -> __aeabi_fadd
        16   -> __aeabi_fadd
        16   -> __aeabi_fdiv
        16   -> __aeabi_fmul
        16   -> __aeabi_fsub
        16   -> floorf
        16 __aeabi_cfcmple
        16 __aeabi_cfrcmple
       8   reload_sensor_data
         8   -> robot_signal_distance
      24   turn_away_wall
        24   -> __aeabi_f2iz
        24   -> __aeabi_fmul
        24   -> get_gyro_radian
        24   -> gyro_radian_diff_f
        24 __aeabi_cfcmple
        24 __aeabi_cfrcmple
      48   wall_follow_callback
        48   -- Indirect call
        48   -> __aeabi_fadd
        48   -> __aeabi_memclr4
        48   -> cycle_check_function
        48   -> get_gyro_radian
        48   -> gyro_radian_diff_f
        48   -> reload_sensor_data
        48   -> robot_xy_dist
        48   -> timer_elapsed
        48   -> timer_ms
        48   -> turn_away_wall
        48 __aeabi_cfrcmple
      16   wall_follow_start
        16   -> __aeabi_fadd
        16   -> __aeabi_memclr4
        16   -> get_gyro_radian
        16   -> malloc
       8   wall_follow_stop
         8   -> free


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_15
       4  ??DataTable7_16
       4  ??DataTable7_17
       4  ??DataTable7_18
       4  ??DataTable7_19
       4  ??DataTable7_2
       4  ??DataTable7_20
       4  ??DataTable7_21
       4  ??DataTable7_22
       4  ??DataTable7_23
       4  ??DataTable7_24
       4  ??DataTable7_25
       4  ??DataTable7_26
       4  ??DataTable7_27
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
      16  ?Subroutine0
      26  ?Subroutine1
      12  ?Subroutine2
      16  ?Subroutine3
     282  calculate_wheel_speed
     242  cycle_check_function
     198  follow_wall_run
     112  gyro_radian_diff_f
      46  reload_sensor_data
     112  turn_away_wall
     470  wall_follow_callback
      98  wall_follow_start
      28  wall_follow_stop
      36  wf_g_par
          wf_turn_index_i
          wf_turn_good_count
          in_cycle_go_forward_sig
          WfParames_p
          wf_turn_array_p

 
    36 bytes in section .bss
 1 770 bytes in section .text
 
 1 770 bytes of CODE memory
    36 bytes of DATA memory

Errors: none
Warnings: none
