###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        20/Oct/2017  11:01:08
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  F:\1708\SDK - unlock\src\cfg\exti_cfg.c
#    Command line =  
#        "F:\1708\SDK - unlock\src\cfg\exti_cfg.c" -lcN "F:\1708\SDK -
#        unlock\project\Debug\List\" --diag_error PE223 -o "F:\1708\SDK -
#        unlock\project\Debug\Obj\" --debug --endian=little --cpu=Cortex-M3 -e
#        --fpu=None --dlib_config "D:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\INC\c\DLib_Config_Normal.h" --preinclude
#        "F:\1708\SDK - unlock\project\..\lib\syscall_api.h" -I "F:\1708\SDK -
#        unlock\project\..\includes\" -I "F:\1708\SDK -
#        unlock\project\..\src\includes\" -I "F:\1708\SDK -
#        unlock\project\..\lib\" -I "F:\1708\SDK - unlock\project\..\src\" -I
#        "F:\1708\SDK - unlock\project\..\src\local_process\" -I "F:\1708\SDK -
#        unlock\project\..\src\cfg\" -I "F:\1708\SDK -
#        unlock\project\..\src\dock\" -I "F:\1708\SDK -
#        unlock\project\..\src\guardrail\" -I "F:\1708\SDK -
#        unlock\project\..\src\wireless\" -Ohz
#    List file    =  F:\1708\SDK - unlock\project\Debug\List\exti_cfg.lst
#    Object file  =  F:\1708\SDK - unlock\project\Debug\Obj\exti_cfg.o
#
###############################################################################

F:\1708\SDK - unlock\src\cfg\exti_cfg.c
      1          //------------------------------------------------------------------------------
      2          //  Copyright (C) 2014-2017, Amicro, Inc.
      3          //  All rights reserved.
      4          //------------------------------------------------------------------------------
      5          /*by liyongyong*/
      6          #include "am_exti_cfg.h"
      7          #include "syscall_api.h"
      8          #include "am_device.h"
      9          
     10          /*缓存唤醒原的外部中断id号*/
     11          #define ID_NUM 8
     12          static u32 wakeup_id[ID_NUM]={0};
     13          
     14          /****************************************************************
     15          *Function   :  wake_handler
     16          *Author     :  lyy
     17          *Date       :  2017.4.20
     18          *Description:  外部中断唤醒处理函数
     19          *CallBy     :  任何地方
     20          *Input      :  无
     21          *Output     :  无
     22          *Return     :  无
     23          *Others     :  
     24          *History    : //修改历史
     25              <author>       <time>      <version>           <desc>
     26              lyy            17.4.28       v1.0         build this function
     27          ******************************************************************/
     28          void wake_handler(void)
     29          { 
     30            ;
     31          }
     32          
     33          /****************************************************************
     34          *Function   :  exit_wakeup_cfg
     35          *Author     :  lyy
     36          *Date       :  2017.4.20
     37          *Description:  清除外部中断
     38          *CallBy     :  任何地方，中断除外
     39          *Input      :  无
     40          *Output     :  无
     41          *Return     :  无
     42          *Others     :  
     43          *History    : //修改历史
     44              <author>       <time>      <version>           <desc>
     45              lyy            17.4.28       v1.0         build this function
     46          ******************************************************************/
     47          int16_t exit_wakeup_cfg(void)
     48          {
     49              int i = 0;
     50              for(i = 0;i<ID_NUM;i++)
     51              {
     52                if(wakeup_id[i]!=0)
     53                {
     54                  close(wakeup_id[i]);
     55                  wakeup_id[i] = 0;
     56                }
     57              }
     58            
     59              return 0;
     60          }
     61          
     62          
     63          
     64          /****************************************************************
     65          *Function   :  wakeup_pin_cfg
     66          *Author     :  lyy
     67          *Date       :  2017.4.20
     68          *Description:  配置外部中断
     69          *CallBy     :  任何地方，中断除外
     70          *Input      :  无
     71          *Output     :  无
     72          *Return     :  无
     73          *Others     :  
     74          *History    : //修改历史
     75              <author>       <time>      <version>           <desc>
     76              lyy            17.4.28       v1.0         build this function
     77          ******************************************************************/
     78          s16 wakeup_pin_cfg(void)
     79          {
     80              exti_init_t exti_user_init;
     81              u32 id;
     82              u8 i = 0;
     83          
     84              exti_user_init.IntEn       = ENABLE;
     85              exti_user_init.Int_type    = EXTI_POSITIVE_EDGE;
     86              exti_user_init.WakeupirqEn = ENABLE;
     87              exti_user_init.Wakeup_type = EXTI_WAKEUP_LOW_LEVEL;
     88          
     89              exti_user_init.Wakeup_type = EXTI_WAKEUP_HIGH_LEVEL;
     90              
     91              id = open(DEV_EXTI,AM_IO_MC_KEY_WAKE_ON);
     92              ioctl(id,EXTI_INIT,&exti_user_init);
     93              request_irq(id,(long)wake_handler,0);
     94              wakeup_id[i++] = id;
     95          
     96              exti_user_init.Wakeup_type = EXTI_WAKEUP_LOW_LEVEL;
     97              exti_user_init.Int_type    = EXTI_POSITIVE_EDGE;
     98              id = open(DEV_EXTI,AM_IO_IR_REC_LEFT);
     99              ioctl(id,EXTI_INIT,&exti_user_init);
    100              request_irq(id,(long)wake_handler,0);
    101              wakeup_id[i++] = id;
    102          
    103              exti_user_init.Wakeup_type = EXTI_WAKEUP_LOW_LEVEL;
    104              exti_user_init.Int_type    = EXTI_POSITIVE_EDGE;
    105              id = open(DEV_EXTI,AM_IO_IR_REC_RIGHT);
    106              ioctl(id,EXTI_INIT,&exti_user_init);
    107              request_irq(id,(long)wake_handler,0);
    108              wakeup_id[i++] = id;
    109          
    110              exti_user_init.Wakeup_type = EXTI_WAKEUP_LOW_LEVEL;
    111              exti_user_init.Int_type    = EXTI_POSITIVE_EDGE;
    112              id = open(DEV_EXTI,AM_IO_IR_REC_MIDDLE_LEFT);
    113              ioctl(id,EXTI_INIT,&exti_user_init);
    114              request_irq(id,(long)wake_handler,0);
    115              wakeup_id[i++] = id;
    116              /*
    117              exti_user_init.Wakeup_type = EXTI_WAKEUP_LOW_LEVEL;
    118              exti_user_init.Int_type    = EXTI_POSITIVE_EDGE;
    119              id = open(DEV_EXTI,AM_IO_IR_REC_MIDDLE_RIGHT);
    120              ioctl(id,EXTI_INIT,&exti_user_init);
    121              request_irq(id,(long)wake_handler,0);
    122              wakeup_id[i++] = id;
    123              */
    124              
    125              exti_user_init.Wakeup_type = EXTI_WAKEUP_LOW_LEVEL;
    126              exti_user_init.Int_type    = EXTI_POSITIVE_EDGE;
    127              id = open(DEV_EXTI,AM_IO_IR_REC_BACK_LEFT);
    128              ioctl(id,EXTI_INIT,&exti_user_init);
    129              request_irq(id,(long)wake_handler,0);
    130              wakeup_id[i++] = id;
    131              
    132              exti_user_init.Wakeup_type = EXTI_WAKEUP_LOW_LEVEL;
    133              exti_user_init.Int_type    = EXTI_POSITIVE_EDGE;
    134              id = open(DEV_EXTI,AM_IO_IR_REC_BACK_RIGHT);
    135              ioctl(id,EXTI_INIT,&exti_user_init);
    136              request_irq(id,(long)wake_handler,0);
    137              wakeup_id[i++] = id;
    138          
    139           
    140              #if 1
    141              exti_user_init.Wakeup_type = EXTI_WAKEUP_LOW_LEVEL;
    142              exti_user_init.Int_type    = EXTI_LOW_LEVEL;
    143              id = open(DEV_EXTI,AM_IO_WIFI_WAKE_UP);
    144          /*
    145              if(id == -1)
    146              {
    147                  set_led(4);
    148              }
    149              */
    150              ioctl(id,EXTI_INIT,&exti_user_init);
    151              request_irq(id,(long)wake_handler,0);
    152              wakeup_id[i++] = id;
    153              #endif
    154          //    exti_user_init.Wakeup_type = EXTI_WAKEUP_LOW_LEVEL;
    155          //    exti_user_init.Int_type    = EXTI_POSITIVE_EDGE;
    156          //    id = open(DEV_EXTI,IR_OMNI_PIN);//sys_exti_request(IR_OMNI_PIN);
    157          //    ioctl(id,EXTI_INIT,&exti_user_init);
    158          //    request_irq(id,(long)wake_handler,0);
    159          //    wakeup_id[i++] = id;
    160          
    161          
    162          //    if(ui_interface_get_sleep_level() != CHARGING_SLEEP)
    163          //    {
    164          //      exti_user_init.Wakeup_type = EXTI_WAKEUP_LOW_LEVEL;
    165          //    }
    166          //    else
    167          //    {
    168          //      if(charging_jack())//如果jack 充电，则把io配置相反，则当机器移开充电座时唤醒
    169          //      {
    170          //        exti_user_init.Wakeup_type = EXTI_WAKEUP_HIGH_LEVEL;
    171          //      }
    172          //      else
    173          //      {
    174          //        exti_user_init.Wakeup_type = EXTI_WAKEUP_LOW_LEVEL;
    175          //      }
    176          //    }
    177          //    exti_user_init.Int_type = EXTI_POSITIVE_EDGE ;
    178          //    id =  open(DEV_EXTI,IO_CHARGER_HIGH);
    179          //    ioctl(id,EXTI_INIT,&exti_user_init);
    180          //    request_irq(id,(long)from_jack_wake_handler,0);
    181          //    wakeup_id[i++] = id;
    182          
    183          
    184          //    if(ui_interface_get_sleep_level() != CHARGING_SLEEP)
    185          //    {
    186          //      exti_user_init.Wakeup_type = EXTI_WAKEUP_LOW_LEVEL;
    187          //    }
    188          //    else
    189          //    {
    190          //      if(charging_dock())//如果dock 充电，则把io配置相反，则当机器移开充电座时唤醒
    191          //      {
    192          //        exti_user_init.Wakeup_type = EXTI_WAKEUP_HIGH_LEVEL;
    193          //      }
    194          //      else
    195          //      {
    196          //        exti_user_init.Wakeup_type = EXTI_WAKEUP_LOW_LEVEL;
    197          //      }
    198          //    }
    199          //    exti_user_init.Int_type = EXTI_NEGATIVE_EDGE;
    200          //    id = sys_exti_request(hal_io_index(AM_IO_CHARGER_LOW));
    201          //    exti_init(id,&exti_user_init);
    202          //    sys_exti_register_irq_handler(id,(long)from_dock_wake_handler,0);
    203          //    wakeup_id[i++] = id;
    204          
    205          //    exti_user_init.Int_type = EXTI_NEGATIVE_EDGE;
    206          //    exti_user_init.Wakeup_type = EXTI_WAKEUP_LOW_LEVEL;
    207          //
    208          //    id = sys_exti_request(BUTTON_SPOT);
    209          //    exti_init(id,&exti_user_init);
    210          //    sys_exti_register_irq_handler(id,(long)from_ui_wake_handler,0);
    211          //    wakeup_id[i++] = id;
    212          //
    213          //    exti_user_init.Wakeup_type = EXTI_WAKEUP_LOW_LEVEL;
    214          //    id = sys_exti_request(BUTTON_DOCK);
    215          //    exti_init(id,&exti_user_init);
    216          //    sys_exti_register_irq_handler(id,(long)from_ui_dock_handler,0);
    217          //    wakeup_id[i++] = id;
    218          
    219              return 0;
    220          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   exit_wakeup_cfg
        16   -- Indirect call
       0   wake_handler
      24   wakeup_pin_cfg
        24   -- Indirect call
        24   -> request_irq


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
      14  ?Subroutine0
      16  ?Subroutine1
       8  ?Subroutine2
      10  ?Subroutine3
      36  exit_wakeup_cfg
       2  wake_handler
      32  wakeup_id
     192  wakeup_pin_cfg

 
  32 bytes in section .bss
 290 bytes in section .text
 
 290 bytes of CODE memory
  32 bytes of DATA memory

Errors: none
Warnings: none
